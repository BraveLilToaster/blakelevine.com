---
import { getCollection } from "astro:content";
import JobHistoryItem from "./JobHistoryItem.astro";
import JobHistoryBackground from "./JobHistoryBackground.astro";

const nodeData = [
  {
    id: "bash-gg",
    acivateAt: 0.08,
  },
  {
    id: "neon-marketplace",
    acivateAt: 0.2478,
  },
  {
    id: "midtown-fashion",
    acivateAt: 0.41,
  },
  {
    id: "detroit-labs",
    acivateAt: 0.562,
  },
  {
    id: "pawnguru",
    acivateAt: 0.72,
  },
  {
    id: "service-com",
    acivateAt: 0.8826,
  },
];

const jobs = (await getCollection("jobHistory"))
  .sort((a, b) => b.data.startDate.valueOf() - a.data.startDate.valueOf())
  .map((job) => ({
    ...job.data,
    activateAtDesktop: nodeData.find((val) => val.id === job.data.id)
      ?.acivateAt!,
  }));
---

<div class="m-auto max-w-[912px]">
  <h2 class="text-4xl mb-8 md:text-center">Professional History</h2>
  <p class="text-lg/relaxed">
    I am Blake, a seasoned full-stack engineer with a primary focus on Web
    Development. I utilize my bacground in design create pixel perfect user
    interfaces and complex layouts.
  </p>
  <p class="text-lg/relaxed">
    My expertise in utilizing technologies such as React, React Native,
    TypeScript, NextJS, and Node to develop impactful real-world products. As a
    lead contributor, I have played a pivotal role in the entire product
    lifecycle, demonstrating strong decision-making skills and contributing to
    ideation, prototyping, and successful product launches. My leadership
    capabilities shine through in my track record of guiding teams to success,
    characterized by effective communication, meticulous planning, and a keen
    understanding of business needs.
  </p>
  <div class="relative lg:mt-12 lg:pt-[150px] lg:pb-[190px]">
    <JobHistoryBackground class="max-lg:w-0" />
    <ul class="z-10 relative">
      {
        jobs.map((job, idx) => (
          <li
            class={`group py-6 md:py-12 lg:pt-[8rem] lg:pb-[4rem] ${
              idx % 2 ? `lg:pl-12 lg:pr-48` : `lg:pl-48 lg:pr-12`
            }`}
          >
            <JobHistoryItem
              id={job.id}
              icon={job.icon}
              backgroundFill={job.backgroundFill}
              companyName={job.companyName}
              title={job.title}
              startDate={job.startDate}
              endDate={job.endDate}
              bulletPoints={job.bulletPoints}
              activateAtDesktop={job.activateAtDesktop}
            />
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script>
  import { inView } from "motion";

  let scrollProgress = 0;
  const desktopMedia = window.matchMedia("(min-width: 976px)");
  const jobHistoryItems = document.querySelectorAll("job-history-item");

  desktopMedia.addEventListener("change", handleResize);

  handleResize();

  function handleResize() {
    if (desktopMedia.matches) {
      // TODO:
      // Add map of custom events
      // e.g.
      /*
        declare global {
          type CustomEventMap = {
            "job-history-background-scroll": JobHistoryBackgroundScroll;
          };
        }
      */

      // @ts-ignore
      document.addEventListener(
        "job-history-background-scroll",
        handlDesktopActivation,
      );
    } else {
      handleMobileActivation();
    }
  }

  function handleMobileActivation() {
    jobHistoryItems.forEach((item) => {
      const node = item.querySelector("job-history-node")!;

      inView(node, () => {
        node.setAttribute("data-active", "true");
        return () => node.setAttribute("data-active", "false");
      });
    });
  }

  type JobHistoryBackgroundScroll = {
    payload: {
      progress: number;
    };
  };

  function handlDesktopActivation(
    event: CustomEvent<JobHistoryBackgroundScroll>,
  ) {
    if (desktopMedia.matches) {
      scrollProgress = event.detail.payload.progress;
      jobHistoryItems.forEach((item) => {
        const node = item.querySelector("job-history-node")!;
        if (node instanceof HTMLElement && item instanceof HTMLElement) {
          if (scrollProgress >= Number(item.dataset.activateAtDesktop)) {
            item.dataset.active = "true";
            node.dataset.active = "true";
          } else {
            item.dataset.active = "false";
            node.dataset.active = "false";
          }
        }
      });
    }
  }
</script>
