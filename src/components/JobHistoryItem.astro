---
import JobHistoryNode from "./JobHistoryNode.astro";

interface Props {
  id: string;
  icon: string;
  backgroundFill?: string;
  companyName: string;
  title: string;
  startDate: Date;
  endDate: Date;
  bulletPoints: string[];
  activateAtDesktop: number;
}

const {
  id,
  icon,
  companyName,
  title,
  startDate,
  endDate,
  bulletPoints,
  backgroundFill,
  activateAtDesktop,
} = Astro.props;
---

<job-history-item
  data-active="false"
  data-activate-at-desktop={activateAtDesktop}
>
  <div class="flex flex-col md:flex-row lg:flex-col">
    <JobHistoryNode
      id={id}
      icon={icon}
      size={80}
      backgroundFill={backgroundFill}
      class="mb-2 md:mb-0 md:mr-8 md:shrink-0 lg:mr-0 lg:shrink lg:absolute lg:group-even:right-[16px] lg:group-odd:left-[16px] lg:[&>svg]:w-[100px] lg:[&>svg]:h-[100px]"
    />
    <div class="company-info">
      <h3 class="text-3xl md:text-4xl">{companyName}</h3>
      <p class="text-lg mb-0 font-medium">{title}</p>
      <span class="font-extralight">
        <time datetime={startDate.toISOString()}>
          {
            startDate.toLocaleDateString("en-us", {
              year: "numeric",
              month: "short",
            })
          }
        </time>
         -
        <time datetime={endDate.toISOString()}>
          {
            endDate.toLocaleDateString("en-us", {
              year: "numeric",
              month: "short",
            })
          }
        </time>
      </span>
    </div>
  </div>
  <ul class="flex flex-col list-square pt-6 gap-3 bullets">
    {bulletPoints.map((point) => <li>{point}</li>)}
  </ul>
</job-history-item>

<style>
  @media (min-width: 976px) {
    :global(.js) {
      .company-info,
      .bullets > li {
        opacity: 0;
        transform: translateY(30px);
      }
    }
  }
</style>

<script>
  class JobHistoryItem extends HTMLElement {
    private hasActivated: boolean;
    node: HTMLElement | null;
    companyInfoElement: HTMLElement | null;
    companyBulletsElement: HTMLElement | null;

    constructor() {
      super();
      this.hasActivated = false;
      this.node = null;
      this.companyInfoElement = null;
      this.companyBulletsElement = null;
    }

    connectedCallback() {
      this.node = this.querySelector("job-history-node")!;
      this.companyInfoElement = this.querySelector(".company-info");
      this.companyBulletsElement = this.querySelector(".bullets");
    }

    static get observedAttributes() {
      return ["data-active"];
    }

    attributeChangedCallback(name: string, old: string, value: string) {
      if (name === "data-active") {
        if (old !== value && !this.hasActivated) {
          this.handleActivateAnimation();
        }
      }
    }

    handleActivateAnimation() {
      const activateInfoAnimation = new Animation(
        new KeyframeEffect(
          this.companyInfoElement,
          [
            {
              opacity: 1,
              transform: "translateY(0px)",
            },
          ],
          {
            easing: "ease-out",
            duration: 500,
            fill: "forwards",
          },
        ),
      );
      activateInfoAnimation.play();

      if (this.companyBulletsElement?.hasChildNodes) {
        let stagger = 1;
        for (const bullet of this.companyBulletsElement?.children) {
          const activateBulletAnimation = new Animation(
            new KeyframeEffect(
              bullet,
              [
                {
                  opacity: 1,
                  transform: "translateY(0px)",
                },
              ],
              {
                easing: "ease-out",
                duration: 400,
                fill: "forwards",
                delay: 100 * stagger,
              },
            ),
          );
          activateBulletAnimation.play();
          stagger = stagger + 2;
        }
      }
    }
  }

  customElements.define("job-history-item", JobHistoryItem);
</script>
